import { getPackageNameFromFilePath, getPackageNameFromModuleSpecifier } from './modules.js';
import { dirname, isInNodeModules, isInternal } from './path.js';
import { fromBinary, isBinary } from './protocols.js';
import { _resolveSync } from './resolve.js';
export const getReferencedDependencyHandler = (collector, deputy, chief) => (specifier, containingFilePath, workspace) => {
    if (isBinary(specifier)) {
        const binaryName = fromBinary(specifier);
        const isHandled = deputy.maybeAddReferencedBinary(workspace, binaryName);
        if (!isHandled)
            collector.addIssue({
                type: 'binaries',
                filePath: containingFilePath,
                workspace: workspace.name,
                symbol: binaryName,
            });
    }
    else {
        if (isInternal(specifier)) {
            const resolvedFilePath = _resolveSync(specifier, dirname(containingFilePath));
            if (resolvedFilePath)
                return resolvedFilePath;
            collector.addIssue({
                type: 'unresolved',
                filePath: containingFilePath,
                workspace: workspace.name,
                symbol: specifier,
            });
        }
        else {
            const packageName = isInNodeModules(specifier)
                ? getPackageNameFromFilePath(specifier)
                : getPackageNameFromModuleSpecifier(specifier);
            const isHandled = packageName && deputy.maybeAddReferencedExternalDependency(workspace, packageName);
            if (!isHandled)
                collector.addIssue({
                    type: 'unlisted',
                    filePath: containingFilePath,
                    workspace: workspace.name,
                    symbol: specifier,
                });
            if (packageName && specifier !== packageName) {
                if (chief.workspacePackagesByName.get(packageName)) {
                    const filePath = _resolveSync(specifier, dirname(containingFilePath));
                    if (filePath)
                        return filePath;
                    collector.addIssue({
                        type: 'unresolved',
                        filePath: containingFilePath,
                        workspace: workspace.name,
                        symbol: specifier,
                    });
                }
            }
        }
    }
};
